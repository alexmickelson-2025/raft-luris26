@page "/home"
@rendermode InteractiveServer
@using System.Collections.Concurrent
@using System.Net.Http.Json

<PageTitle>Raft Cluster</PageTitle>

<h1>Raft Cluster Status</h1>


<table class="table">
    <thead>
        <tr>
            <th>Node URL</th>
            <th>Status</th>
            <th>Term</th>
            <th>Leader</th>
            <th>Send Command</th>
            <th>Logs</th>
            <th>Cluster State</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var node in data)
        {
            <tr>
                <td>@node.Key</td>
                <td>@(node.Value != null ? "✅ Running" : "❌ Down")</td>
                <td>@node.Value?.Term</td>
                <td>@node.Value?.CurrentLiderID</td>
                <td>
                    <input type="text" class="form-control mb-2" @bind="commandValues[node.Key]" placeholder="Enter command" />
                    <button class="btn btn-primary" @onclick="() => SendCommand(node.Key)">Send Command</button>
                </td>
                <td>
                    <pre>@(node.Value?.Log != null ? string.Join("\n", node.Value.Log) : "No logs")</pre>
                </td>
                <td>
                    @GetClusterState(node.Value)
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    string[] Urls = Environment.GetEnvironmentVariable("NODE_URL")?.Split(',') ?? new string[0];
    ConcurrentDictionary<string, NodeData> data = new();
    Dictionary<string, string> commandValues = new(); 
    private Timer? timer;
    HttpClient client = new() { Timeout = TimeSpan.FromSeconds(5) };

    protected override void OnInitialized()
    {
        timer = new Timer(async _ =>
        {
            await FetchData();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 2000);

        foreach (var url in Urls)
        {
            commandValues[url] = string.Empty;
        }
    }

    private async Task FetchData()
    {
        await Task.WhenAll(Urls.Select(async url =>
        {
            try
            {
                var response = await client.GetAsync(url + "/nodeData");
                if (response.IsSuccessStatusCode)
                {
                    var nodeData = await response.Content.ReadFromJsonAsync<NodeData>();
                    if (nodeData != null)
                    {
                        data[url] = nodeData;
                    }
                }
                else
                {
                    data[url] = null;
                }
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error fetching data from {url}: {ex.Message}");
                data[url] = null;
            }
        }).ToArray());
    }

    private async Task SendCommand(string nodeUrl)
    {
        if (commandValues.TryGetValue(nodeUrl, out var customCommand) && !string.IsNullOrEmpty(customCommand))
        {
            var command = new LogEntry(index: data[nodeUrl]?.Log?.Count + 1 ?? 1, term: data[nodeUrl]?.Term ?? 1, command: customCommand);

            try
            {
                var response = await client.PostAsJsonAsync(nodeUrl + "/request/command", command);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Command sent to {nodeUrl}: {customCommand}");
                    commandValues[nodeUrl] = string.Empty;
                }
                else
                {
                    Console.WriteLine($"Failed to send command to {nodeUrl}");
                }
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error sending command: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("No command entered for the node.");
        }
    }

    private string GetClusterState(NodeData? node)
    {
        if (node == null)
            return "🔴 Node Down";

        if (data.Count(n => n.Value != null) >= 2)
            return "🟢 Fully Functional Cluster";
        else if (data.Count(n => n.Value != null) == 1)
            return "🟠 Partial Cluster - No Election Possible";
        else
            return "🔴 Cluster Unavailable";
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}